---
# app template name
varnish_template_name: "drupsible"

# See https://www.varnish-cache.org/docs/4.1/ for the official documentation
varnish_version: 4.1

# Specify the identity of the varnish server. This can be accessed using
# server.identity from VCL
varnish_identity: varnish

# Specify a name for this instance. Amonst other things, this name is used to
# construct the name of the directory in which varnishd keeps temporary files
# and persistent state. If the specified name begins with a forward slash, it is
# interpreted as the absolute path to the directory which should be used for
# this purpose.
varnish_instance_name: "{{varnish_identity}}"

varnish_conf_dir: "/etc/{{varnish_instance_name}}"
varnish_conf_file: "/etc/default/{{varnish_instance_name}}"
# Directory from which relative VCL filenames (vcl.load and include) are opened.
varnish_vcl_dir: "{{varnish_conf_dir}}"
# Directory where VCL modules are to be found.
varnish_vmod_dir: /usr/lib/varnish/vmods

# Write the process's PID to the specified file.
varnish_runtime_dir: /var/run
varnish_pid_file: "{{varnish_runtime_dir}}/{{varnish_instance_name}}.pid"

varnish_vcl: "{{ varnish_template_name }}"

# Enables debugging mode: The parent process runs in the foreground with a CLI
# connection on stdin/stdout, and the child process must be started explicitly
# with a CLI command. Terminating the parent process will also terminate the
# child.
varnish_debug: no

# Run in background as a daemon.
varnish_daemonize: yes

# Specifies the names of the unprivileged user:group to which the child process
# should switch before it starts accepting connections.
varnish_user:
varnish_group:

varnish_environment: {}


# Interfaces
# -----------

# Use the specified host as backend server. If port is not specified, the
# default is 8080.
varnish_backend: 8080

# Listen for client requests on the specified addresses. The address can
# be a host name (“localhost”), an IPv4 dotted-quad (“127.0.0.1”), or an IPv6
# address enclosed in square brackets (“[::1]”). If address is not specified,
# varnishd will listen on all available IPv4 and IPv6 interfaces. If port is not
# specified, the default HTTP port as listed in /etc/services is used.
varnish_http_server: on
varnish_http_server_listen_on: '80'

# Offer a management interface on the specified address and port.
varnish_management_console: on
varnish_management_console_listen_on: 6082
# Path to a file containing a secret used for authorizing access to the
# management port.
varnish_management_console_secret_file: "/etc/varnish/secret"


# Common settings
# ---------------

# The following hash algorithms are available:
#
#   - simple_list:
#     A simple doubly-linked list. Not recommended for production use.
#
#   - classic[,buckets]:
#     A standard hash table. This is the default. The hash key
#     is the CRC32 of the object's URL modulo the size of the hash table. Each
#     table entry points to a list of elements which share the same hash key. The
#     buckets parameter specifies the number of entries in the hash table. The
#     default is 16383.
#
#   - critbit:
#     A self-scaling tree structure. The default hash algorithm in 2.1. In
#     comparison to a more traditional B tree the critbit tree is almost
#     completely lockless.
#
# See: https://www.varnish-cache.org/docs/4.0/reference/varnishd.html#hash-algorithms
varnish_hash_algorithm:
  type: classic
  options: ['16383']

# Use the specified list of storage backends. You can name the different
# backends. Varnish will then reference that backend with the given name in
# logs, statistics, etc.
#
# The following storage backends are available:
#
#   - malloc[,size]
#
#     Malloc is a memory based backend. Each object will be allocated from
#     memory. If your system runs low on memory swap will be used. Be aware that
#     the size limitation only limits the actual storage and that approximately
#     1k of memory per object will be used for various internal structures.
#
#     The size parameter specifies the maximum amount of memory varnishd will
#     allocate. The size is assumed to be in bytes, unless followed by one of
#     the following suffixes:
#
#       - K, k The size is expressed in kibibytes.
#       - M, m The size is expressed in mebibytes.
#       - G, g The size is expressed in gibibytes.
#       - T, t The size is expressed in tebibytes.
#
#     The default size is unlimited.
#
#     Mallocs performance is bound by memory speed so it is very fast.
#
#   - file[,path[,size[,granularity]]]
#
#     The file backend stores objects in memory backed by a file on disk with
#     mmap. This is the default storage backend and unless you specify another
#     storage this one will used along with Transient storage.
#
#     The path parameter specifies either the path to the backing file or the
#     path to a directory in which varnishd will create the backing file. The
#     default is /tmp.
#
#     The size parameter specifies the size of the backing file. The size is
#     assumed to be in bytes, unless fol‐ lowed by one of the following
#     suffixes:
#
#     K, k The size is expressed in kibibytes.
#     M, m The size is expressed in mebibytes.
#     G, g The size is expressed in gibibytes.
#     T, t The size is expressed in tebibytes.
#
#     % The size is expressed as a percentage of the free space on the
#     file system where it resides.
#     The default size is 50%.
#
#     If the backing file already exists, it will be truncated or expanded to
#     the specified size.
#
#     Note that if varnishd has to create or expand the file, it will not pre-
#     allocate the added space, leading to fragmentation, which may adversely
#     impact performance. Pre-creating the storage file using dd(1) will reduce
#     fragmentation to a minimum.
#
#     The granularity parameter specifies the granularity of allocation. All
#     allocations are rounded up to this size. The size is assumed to be in
#     bytes, unless followed by one of the suffixes described for size except
#     for %.
#
#     The default size is the VM page size. The size should be reduced if you
#     have many small objects.
#
#     File performance is typically limited by the write speed of the device,
#     and depending on use, the seek time.
#
#   - persistent,path,size *experimental*
#
#     Persistent storage. Varnish will store objects in a file in a manner that
#     will secure the survival of most of the objects in the event of a planned
#     or unplanned shutdown of Varnish.
#
#     The path parameter specifies the path to the backing file. If the file
#     doesn't exist Varnish will create it.
#
#     Varnish will split the file into logical silos and write to the silos in
#     the manner of a circular buffer. Only one silo will be kept open at any
#     given point in time. Full silos are sealed. When Varnish starts after a
#     shutdown it will discard the content of any silo that isn't sealed.
#
# For every storage backend, the size is assumed to be in bytes, unless followed
# by one of the following suffixes:
#
#     K, k The size is expressed in kibibytes.
#     M, m The size is expressed in mebibytes.
#     G, g The size is expressed in gibibytes.
#     T, t The size is expressed in tebibytes.
#
# See: https://www.varnish-cache.org/docs/4.0/reference/varnishd.html#storage-types
varnish_storage_backends:
  default:
    type: malloc
    options: ['{{ansible_memtotal_mb / 2 | round() }}M']

# The storage backend named "Transient" will be used for transient (short lived)
# objects. By default Varnish uses an unlimited malloc backend for this.
varnish_transient_storage_backend:
  type: malloc
  options: []

# Tuning
# ------

# Open files (usually 1024, which is way too small for varnish).
varnish_ulimit: 131072

# Maxiumum locked memory size for shared memory log.
varnish_memlock: 82000

# For the complete list of parameters/options available, read
# https://www.varnish-cache.org/docs/trunk/reference/varnishd.html#ref-varnishd-options
varnish_params:
  pipe_timeout: 600

varnish_maintenance_page_markup: |
  <?xml version="1.0" encoding="utf-8"?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html>
    <head>
      <title>"} + beresp.status + " " + beresp.reason + {"</title>
    </head>
    <body>
      <h1>Error "} + beresp.status + " " + beresp.reason + {"</h1>
      <p>"} + beresp.reason + {"</p>
      <h3>Guru Meditation:</h3>
      <p>XID: "} + bereq.xid + {"</p>
      <hr>
      <p>Varnish cache server</p>
    </body>
  </html>

varnish_maintenance_page_synth_markup: |
  <?xml version="1.0" encoding="utf-8"?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html>
    <head>
      <title>"} + resp.status + " " + resp.reason + {"</title>
    </head>
    <body>
      <h1>Error "} + resp.status + " " + resp.reason + {"</h1>
      <p>"} + resp.reason + {"</p>
      <h3>Guru Meditation:</h3>
      <p>XID: "} + req.xid + {"</p>
      <hr>
      <p>Varnish cache server</p>
    </body>
  </html>

# Inventory groups of backend servers which are allowed to connect to Varnish, ie. webservers
varnish_allow_groups: 'all'

# List of IP addresses to be granted access to purge, cron.php and install.php
# (other than localhost and Vagrant host). This also grants console/terminal
# access.
varnish_allowed_hosts: []

varnish_trusted_hosts_enable: True
varnish_regexp_pipe_paths: [ 'admin.*' ]

varnish_ferm_dependent_rules:
- type: 'accept'
  dport: [
    "{{ varnish_http_server_listen_on|default(http) }}",
    "{{ varnish_management_console_listen_on|default(6082) }}"
  ]
  saddr: "{{ varnish_allow_group_ip_addr.replace('\n', '').split(',') + varnish_allowed_hosts }}"
  accept_any: True
  weight: '10'
  role: 'varnish'
  name: 'http_console'
  multiport: True
- type: 'accept'
  chain: 'OUTPUT'
  dport: [
    "{{ varnish_backend|default(8080) }}"
  ]
  accept_any: True
  weight: '60'
  role: 'varnish'
  name: 'backend'

varnish_app_name: 'default'

# Backend default parameters
varnish_be_connect_timeout: 30s
varnish_be_first_byte_timeout: 60s
varnish_be_between_bytes_timeout: 20s
varnish_be_max_connections: 300
# Probe default parameters
varnish_be_probe_interval: 30s
varnish_be_probe_timeout: 2s
varnish_be_probe_window: 3
varnish_be_probe_threshold: 2
varnish_be_probe_initial: 2

#
# Cache tags section
#
# Default is to process cache tags in the header added by the Purge drupal module.
varnish_cache_tag_header_request: "Purge-Cache-Tag"
# Default is to NOT forward the cache tag to the client.
varnish_cache_tag_header_forward_enabled: no
# Default is the Cloudflare header.
varnish_cache_tag_header_forwarded: "Cache-Tag"
# Varnish modules (build from source)
varnish_modules_release: "varnish-modules-0.9.0"
varnish_build_dir: "/tmp"

# Varnish dev flag, enable on your local
varnish_development_enabled: no

# Do you really need to cache static files that don't cause load? Only if you have memory left.
varnish_cache_static_files_enabled: yes
varnish_static_files_ext: "html|pdf|asc|dat|txt|doc|xls|ttf|ppt|woff|eot|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js"

# List of large static files extentions (ie. videos)
varnish_large_static_files_ext: "7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip"
