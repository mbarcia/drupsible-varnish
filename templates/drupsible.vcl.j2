vcl 4.0;

# {{ ansible_managed }}

# Load the directors.
import directors;    
# Import VMod's.
import std;
# Cache tags support
import xkey;

# block drupsible backend

sub vcl_init {
# block drupsible init
}

# Define the internal network to access cron.php, install.php and purge with Ctrl-F5.
acl internal {
# block drupsible acl
}
sub vcl_recv {
  if (! req.http.Host) {
    return (synth(404, "Need a host header in the HTTP request."));
  }
# block drupsible recv
}

sub vcl_hit {
  if (obj.ttl >= 0s) {
    # normal hit
    return (deliver);
  }
  # We have no fresh fish. Lets look at the stale ones.
  if (std.healthy(req.backend_hint)) {
    # Backend is healthy. Limit age to 10s.
    if (obj.ttl + 10s > 0s) {
      set req.http.grace = "normal(limited)";
      return (deliver);
    } else {
      # No candidate for grace. Fetch a fresh object.
      return(fetch);
    }
  } else {
    # backend is sick - use full grace
    if (obj.ttl + obj.grace > 0s) {
      set req.http.grace = "full";
      return (deliver);
    } else {
      # no graced object.
      return (fetch);
    }
  }
}

# Code determining what to do when serving items from the Apache servers.
# beresp == Back-end response from the web server.
sub vcl_backend_response {
  # Allow items to be stale if needed
  set beresp.ttl = 10s;
  set beresp.grace = 1h;

  # Don't allow static files to set cookies.
  # (?i) denotes case insensitive in PCRE (perl compatible regular expressions).
  # This list of extensions appears twice, once here and again in vcl_recv so
  # make sure you edit both and keep them equal.
  if (bereq.url ~ "(?i)\.(html|pdf|asc|dat|txt|doc|xls|ttf|ppt|woff|eot|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
    unset beresp.http.set-cookie;
  }

  # We need this to cache 404s, 301s, 500s. Otherwise, depending on backend but
  # definitely in Drupal's case these responses are not cacheable by default.
  if (beresp.status == 404 || beresp.status == 301 || beresp.status == 500) {
    # Cache responses for 2 minutes
    set beresp.http.Cache-Control = "max-age=120";
    set beresp.ttl = 120s;
    set beresp.grace = 120s;
  }
}

# Set a header to track a cache HIT/MISS.
sub vcl_deliver {
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }

  set resp.http.grace = req.http.grace;

  {% if varnish_cache_tag_header_forward_enabled|default(False)|bool %}
    {% if varnish_cache_tag_header_forwarded != "" and varnish_cache_tag_header_request != "" %}
  # Forward the backend cache tags to the client in a designated header in the response
  set resp.http.{{ varnish_cache_tag_header_forwarded }} = resp.http.{{ varnish_cache_tag_header_request }};
    {% endif %}
  {% endif %}
}

sub vcl_pipe {
  set bereq.http.connection = "close";
}

sub vcl_backend_error {
    set beresp.http.Content-Type = "text/html; charset=utf-8";
    set beresp.http.Retry-After = "5";
    synthetic( {"
{{ varnish_maintenance_page_markup }}
"} );
    return (deliver);
}

sub vcl_synth {
    # To redirect to www (see vcl_recv)
    if (resp.status == 750) {
        set resp.http.Location = resp.reason;
        set resp.status = 301;
    }

    set resp.http.Content-Type = "text/html; charset=utf-8";
    set resp.http.Retry-After = "5";
    synthetic( {"
{{ varnish_maintenance_page_synth_markup }}
"} );
    return (deliver);
}
