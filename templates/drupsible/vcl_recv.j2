  # Called at the beginning of a request, after the complete request has been received and parsed.
  # Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable,
  # which backend to use.
  # also used to modify the request

  # Normalize the header, remove the port (in case you're testing this on various TCP ports)
  set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");

  # Normalize the query arguments
  set req.url = std.querysort(req.url);

{% if varnish_trusted_hosts_enable|d(True)|bool %}
  if (
    req.http.Host != "{{ app_webhost }}.{{ varnish_webdomain }}" &&
{% if varnish_trusted_hosts is defined %}
  {% for trusted_host in varnish_trusted_hosts %}
    req.http.Host != "{{ trusted_host }}" &&
  {% endfor %}
{% endif %}
    req.http.Host !~ "(?i)^.*{{ varnish_webdomain|regex_replace('[.]', '\\.') }}$"
  ) {
    return (synth(418, "http://" + req.http.Host + req.url));
  }
{% endif %}

  # Allow purging
  if (req.method == "PURGE") {
    if (!client.ip ~ internal) {
      # Not from an allowed IP? Then die with an error.
      return (synth(405, "This IP is not allowed to send PURGE requests."));
    }
    if (req.http.{{ varnish_cache_tag_header_request|default('Purge-Cache-Tags') }}) {
      # Purge all the cache tags in the PURGE request
      if (xkey.purge(req.http.{{ varnish_cache_tag_header_request|default('Purge-Cache-Tags') }}) != 0) {
        return (synth(200, "Purged"));
      } else {
        return (synth(404, "Key not found"));
      }
    }
    # If you got this stage (and didn't error out above), purge the cached result
    return(purge);
  }

  # Only deal with "normal" types
  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "PATCH" &&
      req.method != "DELETE") {
    /* Non-RFC2616 or CONNECT which is weird. */
    return (pipe);
  }

  # Strip hash, server doesn't need it.
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Pipe these paths directly to Apache for streaming.
  if (req.url ~ "/(download|{% for path in varnish_regexp_pipe_paths %}{{ path }}|{% endfor %}export)$") {
    return (pipe);
  }

  # Do not cache these paths.
  if (req.url ~ "^/status\.php$" ||
      req.url ~ "^/update\.php$" ||
      req.url ~ "^/user/logout$" ||
      req.url ~ "^/ooyala/ping$" ||
      req.url ~ "^/admin/.*$" ||
      req.url ~ "^/info/.*$" ||
      req.url ~ "^/flag/.*$" ||
      req.url ~ "^.*/ajax/.*$" ||
      req.url ~ "^/phpMyAdmin/.*$" ||
      req.url ~ "^.*/ahah/.*$") {
       return (pass);
  }

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Trusted host pattern defense
  if (req.http.Host == "{{ varnish_webdomain }}") {
    set req.http.Host = "{{ varnish_webhost }}.{{ varnish_webdomain }}";
    if ( req.http.X-Forwarded-Proto !~ "(?i)https") {
      return (synth(750, "http://" + req.http.Host + req.url));
    }
    else {
      return (synth(750, "https://" + req.http.Host + req.url));
    }
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
  if (req.url ~ "^[^?]*\.({{ varnish_large_static_files_ext }})(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

{% if varnish_cache_static_files_enabled|default(False)|bool %}
  # Remove all cookies for static files, thus forcing them to be cached.
  # This list of extensions appears twice, once here and again in vcl_backend_response.
  # So, make sure you edit both and keep them equal.
  if (req.url ~ "(?i)\.({{ varnish_static_files_ext }})(\?.*)?$") {
    unset req.http.Cookie;
    return(hash);
  }
{% endif %}

  # Use anonymous, cached pages if all backends are down.
  if (!std.healthy(req.backend_hint)) {
    unset req.http.Cookie;
  }

  # Do not cache the user paths either
  if (req.url ~ "^/(user|user/(login|password|register))$") {
    return(pass);
  }

  # Only allow internal access to cron.php or install.php.
  if (req.url ~ "^/(cron|install)\.php$" && !client.ip ~ internal) {
    # Use a custom error page that you've defined in Drupal at the path "404".
    set req.url = "/404";
  }

  # Deliver the grace header (with a default value for now)
  set req.http.grace = "none";

  # Handle compression correctly. Different browsers send different
  # "Accept-Encoding" headers, even though they mostly all support the same
  # compression mechanisms. By consolidating these compression headers into
  # a consistent format, we can reduce the size of the cache and get more hits.
  # @see: http:// varnish.projects.linpro.no/wiki/FAQ/Compression
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      # If the browser supports it, we'll use gzip.
      set req.http.Accept-Encoding = "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
      # Next, try deflate if it is supported.
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      # Unknown algorithm. Remove it and send unencoded.
      unset req.http.Accept-Encoding;
    }
  }

  # Don't cache Drupal logged-in user sessions
  # LOGGED_IN is the cookie that earlier version of Pressflow sets
  # VARNISH is the cookie which the varnish.module sets
  if (req.http.Cookie ~ "(VARNISH|DRUPAL_UID|LOGGED_IN|bto.open.userid)") {
    return (pass);
  }

{% if varnish_cache_static_files_enabled|default(False)|bool %}
  # Force cache here.
  if (req.url ~ "^/sites/default/files/.*$") {
    unset req.http.Cookie;
    return(hash);
  }
{% endif %}

  # Remove all cookies that Drupal doesn't need to know about. We explicitly
  # list the ones that Drupal does need, the SESS and NO_CACHE. If, after
  # running this code we find that either of these two cookies remains, we
  # will pass as the page cannot be cached.
  if (req.http.Cookie) {
    # Now strip all BUT the cookies we care about.

    # 1. Append a semi-colon to the front of the cookie string.
    # 2. Remove all spaces that appear after semi-colons.
    # 3. Match the cookies we want to keep, adding the space we removed
    #    previously back. (\1) is first matching group in the regsuball.
    # 4. Remove all other cookies, identifying them by the fact that they have
    #    no space after the preceding semi-colon.
    # 5. Remove all spaces and semi-colons from the beginning and end of the
    #    cookie string.
    set req.http.Cookie = ";" + req.http.Cookie;
    set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-zA-Z0-9_-]+|NO_CACHE)=", "; \1=" );
    set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

    if (req.http.Cookie == "") {
      # If there are no remaining cookies, remove the cookie header. If there
      # aren't any cookie headers, Varnish's default behavior will be to cache
      # the page.
      unset req.http.Cookie;
    }
    else {
      # Do not cache, ask the backend(s)
      # std.syslog(0, req.http.Cookie);
      return (pass);
    }
  }

  if(std.healthy(req.backend_hint)) {
    if (req.http.pragma ~ "(?i)no-cache" || req.http.Cache-Control ~ "(?i)no-cache") {
      if (client.ip ~ internal) {
        # http://varnish.projects.linpro.no/wiki/VCLExampleEnableForceRefresh
        # Ignore requests via proxy caches and badly behaved crawlers
        # like msnbot that send no-cache with every request.
        if (! (req.http.Via || req.http.User-Agent ~ "(?i)bot" || req.http.X-Purge)) {
          return (purge); # Couple this with restart in vcl_purge and X-Purge header to avoid loops
        }
      }
    }
  }

  # Send Surrogate-Capability headers to announce ESI support to backend
  set req.http.Surrogate-Capability = "key=ESI/1.0";

  if (req.http.Authorization) {
    # Not cacheable by default
    return (pass);
  }

  return (hash);
